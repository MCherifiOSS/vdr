Index: vdr-1.7.28/channels.c
===================================================================
--- vdr-1.7.28.orig/channels.c	2012-06-03 23:13:52.617011476 +0200
+++ vdr-1.7.28/channels.c	2012-06-03 23:13:52.641011477 +0200
@@ -394,6 +394,15 @@
      }
 }
 
+void cChannel::SetTPidData(char TLangs[][MAXLANGCODE2], int TPages[])
+{
+  for (int i = manualtpages; i < MAXTPAGES; i++) {
+      tpages[i] = TPages[i];
+      strn0cpy(tlangs[i], TLangs[i], MAXLANGCODE2);
+      }
+  tpages[MAXTPAGES] = 0;
+}
+
 void cChannel::SetCaIds(const int *CaIds)
 {
   if (caids[0] && caids[0] <= CA_USER_MAX)
@@ -524,10 +533,15 @@
         q += IntArrayToString(q, Channel->dpids, 10, Channel->dlangs, Channel->dtypes);
         }
      *q = 0;
-     const int TBufferSize = MAXSPIDS * (5 + 1 + MAXLANGCODE2) + 10; // 5 digits plus delimiting ',' or ';' plus optional '=cod+cod', +10: paranoia and tpid
+     const int TBufferSize = (MAXTPAGES * MAXSPIDS) * (5 + 1 + MAXLANGCODE2) + 10; // 5 digits plus delimiting ',' or ';' plus optional '=cod+cod', +10: paranoia and tpid
      char tpidbuf[TBufferSize];
      q = tpidbuf;
      q += snprintf(q, sizeof(tpidbuf), "%d", Channel->tpid);
+     if (Channel->manualtpages > 0) {
+        *q++ = '+';
+        for (int i = 0; i < Channel->manualtpages; ++i)
+            q += snprintf(q, sizeof(tpidbuf) - (q - tpidbuf), "%d%s%s",  ((Channel->tpages[i] >> 8) & 0x7) * 100 + ((Channel->tpages[i] >> 4) & 0xF) * 10 + (Channel->tpages[i] & 0xF), *Channel->tlangs[i] ? "=" : "", *Channel->tlangs[i] ? Channel->tlangs[i] : "");
+        }
      if (Channel->spids[0]) {
         *q++ = ';';
         q += IntArrayToString(q, Channel->spids, 10, Channel->slangs);
@@ -698,6 +712,33 @@
                     }
               spids[NumSpids] = 0;
               }
+           manualtpages = 0;
+           if ((p = strchr(tpidbuf, '+')) != NULL) {
+              *p++ = 0;
+              char *q;
+              char *strtok_next;
+              while ((q = strtok_r(p, ",", &strtok_next)) != NULL) {
+                    if (manualtpages < MAXTPAGES) {
+                       int page;
+                       char *l = strchr(q, '=');
+                       if (l) {
+                          *l++ = 0;
+                          strn0cpy(tlangs[manualtpages], l, MAXLANGCODE2);
+                          }
+                       if (sscanf(q, "%d", &page) == 1)
+                          tpages[manualtpages++] = (               (0x02 & 0x1F) << 13) | // subtitling type
+                                                   ( ((page / 100)       & 0x7)  << 8 ) | // magazine number
+                                                   ((((page % 100) / 10) & 0xF)  << 4 ) | // page number tens
+                                                   ( ((page % 100) % 10) & 0xF);          // page number units
+                       else
+                          esyslog("ERROR: invalid Teletext page!"); // no need to set ok to 'false'
+                       }
+                    else
+                       esyslog("ERROR: too many Teletext pages!"); // no need to set ok to 'false'
+                    p = NULL;
+                    }
+              tpages[manualtpages] = 0;
+              }
            if (sscanf(tpidbuf, "%d", &tpid) != 1)
               return false;
            if (caidbuf) {
Index: vdr-1.7.28/channels.h
===================================================================
--- vdr-1.7.28.orig/channels.h	2012-06-03 23:13:52.617011476 +0200
+++ vdr-1.7.28/channels.h	2012-06-03 23:13:52.641011477 +0200
@@ -35,6 +35,7 @@
 #define MAXDPIDS 16 // dolby (AC3 + DTS)
 #define MAXSPIDS 32 // subtitles
 #define MAXCAIDS 12 // conditional access
+#define MAXTPAGES 8 // teletext pages
 
 #define MAXLANGCODE1 4 // a 3 letter language code, zero terminated
 #define MAXLANGCODE2 8 // up to two 3 letter language codes, separated by '+' and zero terminated
@@ -116,6 +117,9 @@
   uint16_t compositionPageIds[MAXSPIDS];
   uint16_t ancillaryPageIds[MAXSPIDS];
   int tpid;
+  int manualtpages;
+  char tlangs[MAXTPAGES][MAXLANGCODE2];
+  int tpages[MAXTPAGES + 1]; // list is zero-terminated
   int caids[MAXCAIDS + 1]; // list is zero-terminated
   int nid;
   int tid;
@@ -167,6 +171,8 @@
   uint16_t CompositionPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? compositionPageIds[i] : uint16_t(0); }
   uint16_t AncillaryPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? ancillaryPageIds[i] : uint16_t(0); }
   int Tpid(void) const { return tpid; }
+  const char *Tlang(int i) const { return (0 <= i && i < MAXTPAGES) ? tlangs[i] : ""; }
+  const int TPages(int i) const { return (0 <= i && i < MAXTPAGES) ? tpages[i] : 0; }
   const int *Caids(void) const { return caids; }
   int Ca(int Index = 0) const { return Index < MAXCAIDS ? caids[Index] : 0; }
   int Nid(void) const { return nid; }
@@ -196,6 +202,7 @@
   void SetPortalName(const char *PortalName);
   void SetNetworkName(const char *NetworkName);
   void SetPids(int Vpid, int Ppid, int Vtype, int *Apids, int *Atypes, char ALangs[][MAXLANGCODE2], int *Dpids, int *Dtypes, char DLangs[][MAXLANGCODE2], int *Spids, char SLangs[][MAXLANGCODE2], int Tpid);
+  void SetTPidData(char TLangs[][MAXLANGCODE2], int TPages[]);
   void SetCaIds(const int *CaIds); // list must be zero-terminated
   void SetCaDescriptors(int Level);
   void SetLinkChannels(cLinkChannels *LinkChannels);
Index: vdr-1.7.28/pat.c
===================================================================
--- vdr-1.7.28.orig/pat.c	2012-04-15 11:54:53.000000000 +0200
+++ vdr-1.7.28/pat.c	2012-06-03 23:13:52.641011477 +0200
@@ -343,6 +343,9 @@
         char DLangs[MAXDPIDS][MAXLANGCODE2] = { "" };
         char SLangs[MAXSPIDS][MAXLANGCODE2] = { "" };
         int Tpid = 0;
+        char TLangs[MAXTPAGES][MAXLANGCODE2] = { "" };
+        int TPages[MAXTPAGES + 1] = { 0 };
+        int NumTPages = 0;
         int NumApids = 0;
         int NumDpids = 0;
         int NumSpids = 0;
@@ -434,8 +437,19 @@
                                     NumSpids++;
                                     }
                                  break;
-                            case SI::TeletextDescriptorTag:
+                            case SI::TeletextDescriptorTag: {
                                  Tpid = esPid;
+                                 SI::TeletextDescriptor *sd = (SI::TeletextDescriptor *)d;
+                                 SI::TeletextDescriptor::Teletext ttxt;
+                                 for (SI::Loop::Iterator it; sd->teletextLoop.getNext(ttxt, it); ) {
+                                     if ((NumTPages < MAXTPAGES) && ttxt.languageCode[0] && ((ttxt.getTeletextType() == 0x02) || (ttxt.getTeletextType() == 0x05))) {
+                                        char *s = TLangs[NumTPages];
+                                        strn0cpy(s, I18nNormalizeLanguageCode(ttxt.languageCode), MAXLANGCODE1);
+                                        TPages[NumTPages] = (ttxt.getTeletextPageNumber() & 0xFF) | ((ttxt.getTeletextMagazineNumber() & 0xFF) << 8) | ((ttxt.getTeletextType() & 0x1F) << 13);
+                                        }
+                                     NumTPages++;
+                                     }
+                                 }
                                  break;
                             case SI::ISO639LanguageDescriptorTag: {
                                  SI::ISO639LanguageDescriptor *ld = (SI::ISO639LanguageDescriptor *)d;
@@ -547,6 +561,7 @@
             }
         if (Setup.UpdateChannels >= 2) {
            Channel->SetPids(Vpid, Ppid, Vtype, Apids, Atypes, ALangs, Dpids, Dtypes, DLangs, Spids, SLangs, Tpid);
+           Channel->SetTPidData(TLangs, TPages);
            Channel->SetCaIds(CaDescriptors->CaIds());
            Channel->SetSubtitlingDescriptors(SubtitlingTypes, CompositionPageIds, AncillaryPageIds);
            }
Index: vdr-1.7.28/receiver.c
===================================================================
--- vdr-1.7.28.orig/receiver.c	2012-06-02 15:20:38.000000000 +0200
+++ vdr-1.7.28/receiver.c	2012-06-03 23:13:52.641011477 +0200
@@ -67,7 +67,8 @@
             (Channel->Ppid() == Channel->Vpid() || AddPid(Channel->Ppid())) &&
             AddPids(Channel->Apids()) &&
             AddPids(Channel->Dpids()) &&
-            AddPids(Channel->Spids());
+            AddPids(Channel->Spids()) &&
+            AddPid(Channel->Tpid());
      }
   return true;
 }
Index: vdr-1.7.28/remux.c
===================================================================
--- vdr-1.7.28.orig/remux.c	2012-03-02 11:56:49.000000000 +0100
+++ vdr-1.7.28/remux.c	2012-06-03 23:13:52.641011477 +0200
@@ -219,6 +219,30 @@
   return i;
 }
 
+int cPatPmtGenerator::MakeTeletextDescriptor(uchar *Target, const cChannel *Channel)
+{
+  int i = 0, j = 0;
+  Target[i++] = SI::TeletextDescriptorTag;
+  int l = i;
+  Target[i++] = 0x00; // length
+  for (int n = 0; Channel->TPages(n); n++) {
+      const char *Language = Channel->Tlang(n);
+      int Pages = Channel->TPages(n);
+      Target[i++] = *Language++;
+      Target[i++] = *Language++;
+      Target[i++] = *Language++;
+      Target[i++] = (Pages >> 8) & 0xFF; // teletext type & magazine number
+      Target[i++] = Pages & 0xFF;        // teletext page number
+      j++;
+      }
+  if (j > 0) {
+     Target[l] = j * 5; // update length
+     IncEsInfoLength(i);
+     return i;
+     }
+  return 0;
+}
+
 int cPatPmtGenerator::MakeLanguageDescriptor(uchar *Target, const char *Language)
 {
   int i = 0;
@@ -306,6 +330,7 @@
   if (Channel) {
      int Vpid = Channel->Vpid();
      int Ppid = Channel->Ppid();
+     int Tpid = Channel->Tpid();
      uchar *p = buf;
      int i = 0;
      p[i++] = 0x02; // table id
@@ -338,6 +363,10 @@
          i += MakeStream(buf + i, 0x06, Channel->Spid(n));
          i += MakeSubtitlingDescriptor(buf + i, Channel->Slang(n), Channel->SubtitlingType(n), Channel->CompositionPageId(n), Channel->AncillaryPageId(n));
          }
+     if (Tpid) {
+        i += MakeStream(buf + i, 0x06, Tpid);
+        i += MakeTeletextDescriptor(buf + i, Channel);
+        }
 
      int sl = i - SectionLength - 2 + 4; // -2 = SectionLength storage, +4 = length of CRC
      buf[SectionLength] |= (sl >> 8) & 0x0F;
Index: vdr-1.7.28/remux.h
===================================================================
--- vdr-1.7.28.orig/remux.h	2011-09-04 14:48:26.000000000 +0200
+++ vdr-1.7.28/remux.h	2012-06-03 23:13:52.645011477 +0200
@@ -174,6 +174,7 @@
   int MakeStream(uchar *Target, uchar Type, int Pid);
   int MakeAC3Descriptor(uchar *Target, uchar Type);
   int MakeSubtitlingDescriptor(uchar *Target, const char *Language, uchar SubtitlingType, uint16_t CompositionPageId, uint16_t AncillaryPageId);
+  int MakeTeletextDescriptor(uchar *Target, const cChannel *Channel);
   int MakeLanguageDescriptor(uchar *Target, const char *Language);
   int MakeCRC(uchar *Target, const uchar *Data, int Length);
   void GeneratePmtPid(const cChannel *Channel);
Index: vdr-1.7.28/vdr.5
===================================================================
--- vdr-1.7.28.orig/vdr.5	2012-06-03 23:13:52.617011476 +0200
+++ vdr-1.7.28/vdr.5	2012-06-03 23:13:52.645011477 +0200
@@ -239,6 +239,12 @@
 
 .B ...:201;2001=deu,2002=eng:...
 
+Manual teletext subtitling pages can be defined separated by a '+' sign.
+The pages (separated by commas) can contain language codes, delimited by a '='
+sign, as in
+
+.B ...:201+150=deu,151=fin;2001,2002:...
+
 .TP
 .B Conditional access
 A hexadecimal integer defining how this channel can be accessed:
