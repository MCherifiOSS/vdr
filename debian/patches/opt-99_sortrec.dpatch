#! /bin/sh /usr/share/dpatch/dpatch-run
## sortrec.dpatch by  http://firefly.vdr-developer.org/patches/
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: sortrecordings.patch http://firefly.vdr-developer.org/patches/

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.21/config.c vdr-1.7.21-sortrec/config.c
--- vdr-1.7.21/config.c	2011-10-16 12:07:51.670630123 +0200
+++ vdr-1.7.21-sortrec/config.c	2011-10-16 12:10:11.490630129 +0200
@@ -361,6 +361,8 @@
   UseVps = 0;
   VpsMargin = 120;
   RecordingDirs = 1;
+  RecordingsSortMode = 0;
+  RecordingsSortDirsFirst = 0;
   FoldersInTimerMenu = 1;
   NumberKeysForChars = 1;
   VideoDisplayFormat = 1;
@@ -588,6 +590,8 @@
   else if (!strcasecmp(Name, "UseVps"))              UseVps             = atoi(Value);
   else if (!strcasecmp(Name, "VpsMargin"))           VpsMargin          = atoi(Value);
   else if (!strcasecmp(Name, "RecordingDirs"))       RecordingDirs      = atoi(Value);
+  else if (!strcasecmp(Name, "RecordingsSortMode"))  RecordingsSortMode = atoi(Value);
+  else if (!strcasecmp(Name, "RecordingsSortDirsFirst")) RecordingsSortDirsFirst = atoi(Value);
   else if (!strcasecmp(Name, "FoldersInTimerMenu"))  FoldersInTimerMenu = atoi(Value);
   else if (!strcasecmp(Name, "NumberKeysForChars"))  NumberKeysForChars = atoi(Value);
   else if (!strcasecmp(Name, "VideoDisplayFormat"))  VideoDisplayFormat = atoi(Value);
@@ -721,6 +725,8 @@
   Store("UseVps",             UseVps);
   Store("VpsMargin",          VpsMargin);
   Store("RecordingDirs",      RecordingDirs);
+  Store("RecordingsSortMode", RecordingsSortMode);
+  Store("RecordingsSortDirsFirst", RecordingsSortDirsFirst);
   Store("FoldersInTimerMenu", FoldersInTimerMenu);
   Store("NumberKeysForChars", NumberKeysForChars);
   Store("VideoDisplayFormat", VideoDisplayFormat);
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.21/config.h vdr-1.7.21-sortrec/config.h
--- vdr-1.7.21/config.h	2011-10-16 12:07:51.670630123 +0200
+++ vdr-1.7.21-sortrec/config.h	2011-10-16 12:11:17.950630131 +0200
@@ -330,6 +330,8 @@
   int CardUsesLnbNr[MAXDEVICES];
 //ML-Ende
 
+  int RecordingsSortMode;
+  int RecordingsSortDirsFirst;
   int __EndData__;
   char *noEPGList; // pointer not to be flat-copied
   cString InitialChannel;
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.21/menu.c vdr-1.7.21-sortrec/menu.c
--- vdr-1.7.21/menu.c	2011-10-16 12:07:51.670630123 +0200
+++ vdr-1.7.21-sortrec/menu.c	2011-10-16 12:26:44.860630164 +0200
@@ -2808,6 +2808,12 @@
   eOSState state = cOsdMenu::ProcessKey(Key);
 
   if (state == osUnknown) {
+     const char *RecordingsSortModeTexts[MAXSORTMODES];
+     RecordingsSortModeTexts[0] = tr("main dir alphabetically, subdirs flexible");
+     RecordingsSortModeTexts[1] = tr("main dir by date, subdirs flexible");
+     RecordingsSortModeTexts[2] = tr("all alphabetically");
+     RecordingsSortModeTexts[3] = tr("all by date");
+
      switch (Key) {
        case kPlay:
        case kOk:     return Play();
@@ -2816,8 +2822,15 @@
        case kYellow: return Delete();
        case kInfo:
        case kBlue:   return Info();
-       case k0:      return Rename();
-       case k1...k9: return Commands(Key);
+       case k0:      Setup.RecordingsSortMode = ++Setup.RecordingsSortMode % MAXSORTMODES;
+		     Set(true);
+		     Skins.Message(mtStatus, cString::sprintf("%s %d: %s", tr("Sorting"), Setup.RecordingsSortMode, RecordingsSortModeTexts[Setup.RecordingsSortMode]));
+		     return osContinue;
+       case k8:      return Rename();
+       case k9:      Recordings.ToggleSortOrder();
+	 	     Set(true);
+		     return osContinue;
+       case k1...k7: return Commands(Key);
        case kNone:   if (Recordings.StateChanged(recordingsState))
                         Set(true);
                      break;
@@ -3454,6 +3467,7 @@
    const char *pauseKeyHandlingTexts[3];
 #endif /*USE_LIVEBUFFER*/
   const char *delTimeshiftRecTexts[3];
+  const char *RecordingsSortModeTexts[MAXSORTMODES];
 public:
   cMenuSetupRecord(void);
   };
@@ -3469,6 +3483,10 @@
   delTimeshiftRecTexts[0] = tr("no");
   delTimeshiftRecTexts[1] = tr("confirm");
   delTimeshiftRecTexts[2] = tr("yes");
+  RecordingsSortModeTexts[0] = tr("main dir alphabetically, subdirs flexible");
+  RecordingsSortModeTexts[1] = tr("main dir by date, subdirs flexible");
+  RecordingsSortModeTexts[2] = tr("all alphabetically");
+  RecordingsSortModeTexts[3] = tr("all by date");
   SetSection(tr("Recording"));
   Add(new cMenuEditIntItem( tr("Setup.Recording$Margin at start (min)"),     &data.MarginStart));
   Add(new cMenuEditIntItem( tr("Setup.Recording$Margin at stop (min)"),      &data.MarginStop));
@@ -3494,6 +3512,8 @@
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Split edited files"),        &data.SplitEditedFiles));
   Add(new cMenuEditBoolItem(tr("Setup.Recording$Hard Link Cutter"),          &data.HardLinkCutter));
   Add(new cMenuEditStraItem(tr("Setup.Recording$Delete timeshift recording"),&data.DelTimeshiftRec, 3, delTimeshiftRecTexts));
+  Add(new cMenuEditStraItem(tr("Setup.Recording$Sort recordings by"),        &data.RecordingsSortMode, MAXSORTMODES, RecordingsSortModeTexts));
+  Add(new cMenuEditBoolItem(tr("Setup.Recording$Sort directories before recordings"), &data.RecordingsSortDirsFirst));
 }
 
 // --- cMenuSetupReplay ------------------------------------------------------
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.21/po/de_DE.po vdr-1.7.21-sortrec/po/de_DE.po
--- vdr-1.7.21/po/de_DE.po	2011-10-16 12:07:51.610630123 +0200
+++ vdr-1.7.21-sortrec/po/de_DE.po	2011-10-16 12:59:00.460630231 +0200
@@ -1376,3 +1376,24 @@
 
 msgid "Delete resume information?"
 msgstr "Resume löschen?"
+
+msgid "Setup.Recording$Sort recordings by"
+msgstr "Aufnahmen sortieren nach"
+
+msgid "Setup.Recording$Sort directories before recordings"
+msgstr "Verzeichnisse vor Aufnahmen einsortieren"
+
+msgid "main dir alphabetically, subdirs flexible"
+msgstr "Alphabet für Haupt-, flexibel für Unterverzeichnisse"
+
+msgid "main dir by date, subdirs flexible"
+msgstr "Datum für Haupt-, flexibel für Unterverzeichnisse"
+
+msgid "all alphabetically"
+msgstr "alles alphabetisch"
+
+msgid "all by date"
+msgstr "alles nach Datum"
+
+msgid "Sorting"
+msgstr "Sortierung"
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.21/README.sortrec vdr-1.7.21-sortrec/README.sortrec
--- vdr-1.7.21/README.sortrec	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.21-sortrec/README.sortrec	2011-10-16 13:01:10.370630234 +0200
@@ -0,0 +1,48 @@
++Sort Recordings patch for VDR
++-----------------------------
++Copyright (C) 2005      Frank99 @vdr-portal.de
++Copyright (C) 2006-2009 Christoph Haubrich
++
++Released under the same license as VDR itself, for details see vdr.c or
+http://firefly.vdr-developer.org/patches
+
+This patch changes the sort behaviour of the recordings menu. It is based
+on the patch available here: http://www.vdr-portal.de/board/thread.php?threadid=36031
+Required for this patch is the liemikuutio-patch for VDR which can be found here:
+http://www.saunalahti.fi/%7Erahrenbe/vdr/patches/
+
+There are four sorting modes available after this patch is applied:
+
+mode   behaviour for      behaviour for
+       main directory     sub directories
+--------------------------------------------------------------------------
+  0    alphabetically     if special character(*) is found alphabetically,
+                          else by date
+  1    by date            if special character(*) is found alphabetically,
+                          else by date
+  2    alphabetically     alphabetically
+  3    by date            by date
+
+(*) if the name of a  subdirectory ends with one of ".-$" (dot, hyphen, dollar sign) 
+    it is sorted alphabetically in sort mode 0 and 1
+
+Sort mode 0 with none of the special characters at the end of any subdir 
+corresponds to the default sorting mode of the original VDR.
+
+The sorting mode can be switched through in the recording menu with the '0' key 
+(0->1->2->3->0->...), a default for startup can be set in the setup->recordings menu.
+
+Additionally the sort order (ascending/descending) can be toggled by the '9' key
+(which is always set to ascending after a restart)
+
+If you like the to see subdirectories before recordings you can select to put 
+directories first in the setup->recordings menu. 
+
+If you would like the sorting to ignore a leading '%' (as normally displayed before
+cutted recordings) you can achive this by setting the environment variable LC_COLLATE
+properly (eg. LC_COLLATE=de_DE@euo in runvdr for germany).
+
+History:
+2006-08-13 v3, sortrec release for VDR 1.4.1 and liemikuutio 1.8
+2007-01-28 v3a, moved #ifdef from optimized-rename-patch to sortrec
+2008-03-29 v3b, removed ASCII-170 and ASCII-183 to make sortrec Utf8-ready
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.21/recording.c vdr-1.7.21-sortrec/recording.c
--- vdr-1.7.21/recording.c	2011-10-16 12:07:51.410630123 +0200
+++ vdr-1.7.21-sortrec/recording.c	2011-10-16 13:16:19.540630266 +0200
@@ -611,7 +611,10 @@
 {
   resume = RESUME_NOT_INITIALIZED;
   titleBuffer = NULL;
-  sortBuffer = NULL;
+  for (int i = 0; i < MAXSORTMODES; i++) {
+     sortBuffer[i] = NULL;
+     lastDirsFirst[i] = -1;
+  }
   fileName = NULL;
   name = NULL;
   fileSizeMB = -1; // unknown
@@ -682,7 +685,10 @@
   numFrames = -1;
   deleted = 0;
   titleBuffer = NULL;
-  sortBuffer = NULL;
+  for (int i = 0; i < MAXSORTMODES; i++) {
+    sortBuffer[i] = NULL;
+    lastDirsFirst[i] = -1;
+  }
   FileName = fileName = strdup(FileName);
   if (*(fileName + strlen(fileName) - 1) == '/')
      *(fileName + strlen(fileName) - 1) = 0;
@@ -792,7 +798,9 @@
 cRecording::~cRecording()
 {
   free(titleBuffer);
-  free(sortBuffer);
+  for (int i = 0; i < MAXSORTMODES; i++) {
+     free(sortBuffer[i]);
+  }
   free(fileName);
   free(name);
   delete info;
@@ -813,22 +821,34 @@
            }
         t++;
         } *s1 = 255;
-  if (s1 && s2 && s1 != s && !strchr(".-$ª", *(s1 - 1)))
+
+  if (s1 && s2) {
+    if (Setup.RecordingsSortDirsFirst)
+      *s1 = 'b';
+
+    if ((Setup.RecordingsSortMode <= 1 && s1 != s && !strchr(".-$", *(s1 - 1))) ||
+        (Setup.RecordingsSortMode == 1 && s1 == s) ||
+        (Setup.RecordingsSortMode == 3))
      memmove(s1 + 1, s2, t - s2 + 1);
+  }
+
   return s;
 }
 
 char *cRecording::SortName(void) const
 {
-  if (!sortBuffer) {
-     char *s = StripEpisodeName(strdup(FileName() + strlen(VideoDirectory) ));
+  if (!sortBuffer[Setup.RecordingsSortMode] ||
+        lastDirsFirst[Setup.RecordingsSortMode] != Setup.RecordingsSortDirsFirst) {
+     free(sortBuffer[Setup.RecordingsSortMode]);
+     lastDirsFirst[Setup.RecordingsSortMode] = Setup.RecordingsSortDirsFirst;
+     char *s = StripEpisodeName(strdup(FileName() + strlen(VideoDirectory)));
      strreplace(s, '/', 'a'); // some locales ignore '/' when sorting
      int l = strxfrm(NULL, s, 0) + 1;
-     sortBuffer = MALLOC(char, l);
-     strxfrm(sortBuffer, s, l);
+     sortBuffer[Setup.RecordingsSortMode] = MALLOC(char, l);
+     strxfrm(sortBuffer[Setup.RecordingsSortMode], s, l);
      free(s);
      }
-  return sortBuffer;
+  return sortBuffer[Setup.RecordingsSortMode];
 }
 
 int cRecording::GetResume(void) const
@@ -843,7 +863,7 @@
 int cRecording::Compare(const cListObject &ListObject) const
 {
   cRecording *r = (cRecording *)&ListObject;
-  return strcasecmp(SortName(), r->SortName());
+  return Recordings.GetSortOrder() * strcasecmp(SortName(), r->SortName());
 }
 
 const char *cRecording::FileName(void) const
@@ -1080,8 +1100,10 @@
            fileName = strdup(newFileName);
            free(name);
            name = strdup(newName);
-           free(sortBuffer);
-           sortBuffer = NULL;
+           for (int i = 0; i < MAXSORTMODES; i++) {
+              free(sortBuffer[i]);
+              sortBuffer[i] = NULL;
+           }
            free(titleBuffer);
            titleBuffer = NULL;
            }
@@ -1103,6 +1125,7 @@
   deleted = Deleted;
   lastUpdate = 0;
   state = 0;
+  SortOrder = 1;
 }
 
 cRecordings::~cRecordings()
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.21/recording.h vdr-1.7.21-sortrec/recording.h
--- vdr-1.7.21/recording.h	2011-10-16 12:07:51.610630123 +0200
+++ vdr-1.7.21-sortrec/recording.h	2011-10-16 13:30:14.790630295 +0200
@@ -80,13 +80,16 @@
   bool Read(void);
   bool Write(void) const;
   };
+#define SORTRECORDINGSVERSNUM 3
+#define MAXSORTMODES 4
 
 class cRecording : public cListObject {
   friend class cRecordings;
 private:
   mutable int resume;
   mutable char *titleBuffer;
-  mutable char *sortBuffer;
+  mutable char *sortBuffer[MAXSORTMODES];
+  mutable char lastDirsFirst[MAXSORTMODES];
   mutable char *fileName;
   mutable char *name;
   mutable int fileSizeMB;
@@ -164,6 +167,7 @@
   bool deleted;
   time_t lastUpdate;
   int state;
+  int SortOrder;
   const char *UpdateFileName(void);
   void Refresh(bool Foreground = false);
   void ScanVideoDir(const char *DirName, bool Foreground = false, int LinkLevel = 0);
@@ -195,6 +199,8 @@
   void DelByName(const char *FileName);
   void UpdateByName(const char *FileName);
   int TotalFileSizeMB(void); ///< Only for deleted recordings!
+  void ToggleSortOrder(void) { SortOrder *= -1; }
+  const int GetSortOrder(void) { return SortOrder; }
   };
 
 extern cRecordings Recordings;
